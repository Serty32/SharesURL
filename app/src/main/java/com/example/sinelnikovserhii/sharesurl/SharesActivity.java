package com.example.sinelnikovserhii.sharesurl;import android.app.Activity;import android.content.Intent;import android.graphics.Color;import android.icu.text.TimeZoneFormat;import android.os.Bundle;import android.telecom.Call;import android.widget.ImageButton;import android.widget.TextView;import com.google.gson.Gson;import com.google.gson.JsonElement;import com.google.gson.JsonObject;import com.jjoe64.graphview.GraphView;import com.jjoe64.graphview.LabelFormatter;import com.jjoe64.graphview.Viewport;import com.jjoe64.graphview.series.DataPoint;import com.jjoe64.graphview.series.LineGraphSeries;import org.json.JSONObject;import org.w3c.dom.Text;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import butterknife.BindView;import butterknife.ButterKnife;import lecho.lib.hellocharts.model.Line;import lecho.lib.hellocharts.model.LineChartData;import lecho.lib.hellocharts.model.PointValue;import lecho.lib.hellocharts.view.Chart;import lecho.lib.hellocharts.view.LineChartView;import okhttp3.ResponseBody;import okhttp3.ResponseBody;import retrofit2.Callback;import retrofit2.Response;/** * Created by sinelnikovserhii on 07.07.17. */public class SharesActivity extends Activity {    public static final String KEY_SHARE = "share";    @BindView(R.id.tvOpen) TextView tvOpen;    @BindView(R.id.tvMinDay) TextView tvMinDay;    @BindView(R.id.tvMaxDay) TextView tvMaxDay;    @BindView(R.id.tv52Min) TextView tv52Min;    @BindView(R.id.tv52Max) TextView tv52Max;    @BindView(R.id.tvIndex) TextView tvIndex;    @BindView(R.id.tvName) TextView tvName;    @BindView(R.id.tvDividens) TextView tvDividens;    Gson gson = new Gson();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_about_all);        ButterKnife.bind(this);       final GraphView graph = (GraphView) findViewById(R.id.graph);        final Shares share = (Shares) getIntent().getSerializableExtra(KEY_SHARE);        tvIndex.setText(String.valueOf(share.getIndex()));        tvName.setText(String.valueOf(share.getName()));        tvOpen.setText(String.valueOf(share.getOpen()));        tv52Max.setText(String.valueOf(share.getYearLow()));        tv52Min.setText(String.valueOf(share.getYearHigh()));        tvMaxDay.setText(String.valueOf(share.getDaysHigh()));        tvMinDay.setText(String.valueOf(share.getDaysLow()));        tvDividens.setText(String.valueOf(share.getDividend()));        final ShareService service = new ShareService();        final retrofit2.Call<JsonObject> call = service.getGraph(share.getIndex().toString());        final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);        call.enqueue(new Callback<JsonObject>() {            @Override            public void onResponse(retrofit2.Call<JsonObject> call, Response<JsonObject> response) {                JsonObject timeSeries = response.body().getAsJsonObject("Monthly Time Series");                int i = 0;                DataPoint[] dataPoints = new DataPoint[timeSeries.size()];                for (Map.Entry<String, JsonElement> element : timeSeries.entrySet()) {                    try {                        Date date = dateFormat.parse(element.getKey());                        Float value = element.getValue().getAsJsonObject().get("4. close").getAsFloat();                        dataPoints[i++] = new DataPoint(date, value);                    } catch (Exception ignored) {                        ignored.printStackTrace();                    }                }                LineGraphSeries<DataPoint> series = new LineGraphSeries<>(dataPoints);                graph.addSeries(series);            }            @Override            public void onFailure(retrofit2.Call<JsonObject> call, Throwable t) {            }        });        graph.getGridLabelRenderer().setVerticalAxisTitle("Price");        graph.getGridLabelRenderer().setHorizontalAxisTitle("Date");       /* graph.getGridLabelRenderer().setLabelFormatter(new LabelFormatter() {            final SimpleDateFormat dateFormat = new SimpleDateFormat("d.M.yy", Locale.US);            @Override            public String formatLabel(double value, boolean isValueX) {                if (isValueX) {                    return dateFormat.format(new Date(Double.valueOf(value).longValue()));                } else {                    return String.valueOf(value);                }            }            @Override            public void setViewport(Viewport viewport) {            }        });        */      /*  List<PointValue> values = new ArrayList<>();        values.add(new PointValue(0, 2));        //In most cased you can call data model methods in builder-pattern-like manner.        Line line = new Line(values).setColor(Color.BLUE).setCubic(true);        List<Line> lines = new ArrayList<Line>();        lines.add(line);        LineChartData data = new LineChartData();        data.setLines(lines);*/    }}